generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  providerAccountId String           @id
  userId            String
  type              String?
  provider          String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  LikedTweets       LikedTweets[]
  TimelineTweets    TimelineTweets[]
  Following        Following[]

  @@unique([provider, providerAccountId])
}

model Session {
  providerAccountId String   @id
  sessionToken      String   @unique
  userId            String
  expires           DateTime
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String?
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TimelineTweets {
  id        String   @id @unique @default(cuid())
  author    String
  text      String
  likes     Int      @default(0)
  retweets  Int      @default(0)
  entities  Json?
  createdAt DateTime
  userId    String
  user      Account  @relation(fields: [userId], references: [providerAccountId], onDelete: Cascade)
}

model ListTweets {
  listId    String
  id        String   @id @unique @default(cuid())
  author    String
  text      String
  likes     Int      @default(0)
  retweets  Int      @default(0)
  entities  Json?
  createdAt DateTime
}

model LikedTweets {
  id        String   @id @unique @default(cuid())
  author    String
  username  String
  text      String
  likes     Int      @default(0)
  retweets  Int      @default(0)
  entities  Json?
  createdAt DateTime
  userId    String
  user      Account  @relation(fields: [userId], references: [providerAccountId], onDelete: Cascade)
}

model Following {
  id        String   @id @unique @default(cuid())
  username  String
  name      String?
  bio      String?
  location  String?
  url       String?
  followers  Int      @default(0)
  following  Int      @default(0)
  tweets     Int?      @default(0)
  userId    String
  user      Account  @relation(fields: [userId], references: [providerAccountId], onDelete: Cascade)
}
