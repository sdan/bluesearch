// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  providerAccountId String  @id
  userId            String
  type              String?
  provider          String?

  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?

  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Tweet Tweet[] @relation("Timeline")
  LikedTweets Tweet[] @relation("LikedTweets")

  @@unique([provider, providerAccountId])
}

model Session {
  providerAccountId String   @id
  sessionToken      String   @unique
  userId            String
  expires           DateTime
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String?
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tweet {
  id        String   @id @default(cuid())
  author    String
  text      String
  likes     Int      @default(0)
  retweets  Int      @default(0)
  entities  Json?
  createdAt DateTime
  userId    String

  user Account @relation("Timeline", fields: [userId], references: [providerAccountId], onDelete: Cascade, map: "Tweet_timelin_fkey")
  // Use Tweet model to store list of the users liked tweets
  userLikes Account @relation("LikedTweets", fields: [userId], references: [providerAccountId], onDelete: Cascade, map: "Tweet_likedtweets_fkey")
  @@unique([id])
}
